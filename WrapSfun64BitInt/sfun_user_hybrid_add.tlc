%% Copyright 2020 The MathWorks, Inc.
%%
%% Abstract:
%%      User S-function example
%%      Using on strictly type core algorithm shared
%%      by simulation and by C code generation.
%% 
%%      This example implements a simple hybrid add of two inputs 
%%      The core algorithm is in a C file
%%      that will be shared for both simulation and code generation.
%%     
%%      This s-function handles the registration and so forth 
%%      and calls the core algorithm from the C file.
%% 
%%      For code generation, a corresponding TLC file will 
%%      handle the interfacing aspects, then call the 
%%      core algorithm from the same C file as used for simulation.


%implements sfun_user_hybrid_add "C"

%include "fix_published.tlc"

%function BlockInstanceSetup(block, system) void
  %%
%endfunction 


%function BlockTypeSetup(block, system) void
  %%
  %<LibAddToCommonIncludes("example_func_core_strictly_typed.h")>
  %<LibAddToModelSources("example_func_core_strictly_typed")>
%endfunction


%function Outputs(block, system) Output
  %%
  %%  Put comment into the generated C code
  %%
  /* User Sfunction sfun_user_hybrid_add */
  %%
  %assign labelForU0 = LibBlockInputSignal(0, "", "", 0)
  %assign labelForU1 = LibBlockInputSignal(1, "", "", 0)
  %assign labelForY0 = LibBlockOutputSignal(0,     "", "", 0 )
  %%
  %<labelForY0> = func_core_hybrid_add( %<labelForU0>, %<labelForU1> );
  %%
  %% blank line for formating

%endfunction
